{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quickstart","text":""},{"location":"#panini","title":"panini","text":"<p>Panini is a powerful yet simple way to rapidly define isolated, pinned, and unified development environments.</p>"},{"location":"#step-1-install","title":"Step 1 - Install","text":"<pre><code>pip install panini-compose\n</code></pre>"},{"location":"#step-2-write-a-panini-file","title":"Step 2 - Write a <code>pan.ini</code> file","text":"<pre><code>[postgres]\npostgres=17.4\npassword=devpass\n\n[redis]\n\n[devbox]\nnix=\n  process-compose\n  uv\n  git\n\n[app]\ncmd=uv run python3 app.py\nvia=devbox\n\n[uv]\ncmd=uv {}\nvia=devbox\n\n[up]\nservices=\n    postgres\n    redis\n    app\nvia=devbox\n\n[help]\nhelp       = Manage testapp\napp        = Start testapp\ndevbox     = Run something inside nix\npostgres   = Start postgrees server\nredis      = Start redis server\nup         = Run app and dependencies.\nuv         = Run uv\n</code></pre>"},{"location":"#step-3-run-panini","title":"Step 3 - Run panini","text":"<p><pre><code>$ panini up\n</code></pre> </p>"},{"location":"baseenvs/","title":"Environment Variables Inheritance","text":"<pre><code>[base-envs]\nenv\nA=1\nB=2\n\n[app-envs]\nuse=base-envs\nB=X\n\n[app]\ncmd=printenv C\nvia=app-envs\n</code></pre>"},{"location":"drivers/","title":"Section Types","text":""},{"location":"drivers/#section-types","title":"Section Types","text":""},{"location":"drivers/#cmd","title":"<code>cmd</code>","text":"<p>Runs a command, injecting arguments into <code>{}</code> placeholder if present.</p> Key Description <code>cmd</code> Command to run"},{"location":"drivers/#getcmd","title":"<code>getcmd</code>","text":"<p>Prints the resolved shell command for a task.</p> Key Description <code>getcmd</code> Command to evaluate and echo (optional)"},{"location":"drivers/#help","title":"<code>help</code>","text":"<p>Prints a list of tasks.</p> Key Description <code>help</code> One sentence help <code>*kw</code> Help subcommands -&gt; string mapping"},{"location":"drivers/#env","title":"<code>env</code>","text":"<p>Use keys as environment variables</p> Key Description <code>*kw</code> Environment variables"},{"location":"drivers/#script","title":"<code>script</code>","text":"<p>Executes the given source code as a script.</p> Key Description <code>script</code> Bash or shell script"},{"location":"drivers/#services","title":"<code>services</code>","text":"<p>Runs <code>process-compose</code> with the given services.</p> Key Description <code>services</code> Newline-separated service names"},{"location":"drivers/#shell","title":"<code>shell</code>","text":"<p>Executes a shell snippet using a customizable shell command wrapper.</p> Key Description <code>shell</code> Shell script <code>shellcmd</code> Template for shell runner (optional, defaults to <code>sh -exc {} --</code>)"},{"location":"drivers/#use","title":"<code>use</code>","text":"<p>Imports and executes another task, passing along keyword arguments.</p> Key Description <code>use</code> Task name to import <code>**kw</code> Additional values passed to task"},{"location":"drivers/#package-managers","title":"Package Managers","text":""},{"location":"drivers/#venv","title":"<code>venv</code>","text":"<p>Sets up a temporary Python virtual environment using <code>uv</code> and runs a command inside it.</p> Key Description <code>venv</code> Python requirements to install <code>cmd</code> Command to run inside venv <code>python</code> Python interpreter path (optional)"},{"location":"drivers/#nix","title":"<code>nix</code>","text":"<p>Uses <code>nix-shell</code> to run a command in a Nix environment.</p> Key Description <code>nix</code> Newline-separated packages <code>cmd</code> Command to run in nix-shell (optional, defaults to <code>{}</code>)"},{"location":"drivers/#docker-services","title":"Docker Services","text":""},{"location":"drivers/#mysql","title":"<code>mysql</code>","text":"Key Description <code>mysql</code> MySQL image version <code>port</code> Exposed port on host machine (optional) <code>user</code> Name of the database user (optional) <code>password</code> Password for the user (optional) <code>db</code> Name of the database to create (optional)"},{"location":"drivers/#redis","title":"<code>redis</code>","text":"Key Description <code>redis</code> Redis image version <code>port</code> Exposed port on host machine (optional)"},{"location":"drivers/#postgres","title":"<code>postgres</code>","text":"Key Description <code>postgres</code> PostgreSQL image version <code>port</code> Exposed port on host machine (optional) <code>user</code> Name of the database user (optional) <code>password</code> Password for the user (optional) <code>db</code> Name of the database to create (optional) <code>lang</code> Sets the container's <code>LANG</code> env var (optional)"},{"location":"global_keys/","title":"Global Keys","text":"<p>Keys that are supported by every section.</p>"},{"location":"global_keys/#env","title":"env","text":"<p>Pass envs to command generated by the section.</p>"},{"location":"global_keys/#example","title":"Example","text":"<pre><code>[printenv]\ncmd=printenv FOO\nenv=\n    FOO=val\n</code></pre>"},{"location":"global_keys/#via","title":"via","text":"<p>Pass the command generated by this section into a different section.</p>"},{"location":"global_keys/#example_1","title":"Example","text":"<pre><code>[ssh]\ncmd=ssh root@server {}\n\n[serverstats]\ncmd=htop\nvia=ssh\n</code></pre>"},{"location":"localenvs/","title":"Local Environment Variables","text":"<pre><code>[with-secrets]\nshell=source .envs &amp;&amp; \"$@\"\nshellcmd=sh -ac {} \"\"\n\n[printsecret]\ncmd=printenv SECRET\nvia=with-secrets\n</code></pre>"},{"location":"section_type_declaration/","title":"Section Type Declaration","text":"<p>Every INI section has a section type. The section type is recognised by the following way:</p> <p>Does the section has keys? If yes, the section type is the first key. Else its the section name.</p>"},{"location":"section_type_declaration/#examples","title":"Examples","text":"<p>section type: <code>redis</code></p> <pre><code>[redis]\n</code></pre> <p>section type: <code>script</code> <pre><code>[blah]\nscript=ls\nvia=blub\n</code></pre></p> <p>Let's look at this error case:</p> <pre><code>; wrong\n[blah]\nvia=blub\nscript=ls\n</code></pre> <p>Here the section type would be <code>via</code>, which does not exist.</p>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#basics","title":"Basics","text":"<p>Panini is very similiar to <code>make</code>. The configuration file is in the INI format. Every section is a command that can be called with <code>panini cmd</code></p> <pre><code>; Write this to the file `pan.ini`\n\n[hello]\ncmd=printf \"hello world\\n\"\n</code></pre> <pre><code>$ panini hello\nhello world\n</code></pre> <p>One difference to <code>make</code> is that there are different section types. Here is an examle using the section type called <code>venv</code>.</p> <pre><code>[cowsay]\nvenv=pycowsay\ncmd=pycowsay {}\n</code></pre> <pre><code>$ panini pycowsay huh?\n ______\n&lt; huh? &gt;\n ------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n</code></pre> <p>Note how <code>{}</code> got replaced with the trailing arguments.</p> <p>That looks magical at first but with the builtin command <code>getcmd</code> we can inspect what is actually happening there.</p> <pre><code>$ panini getcmd cowsay huh?\nuv run --no-project --with pycowsay -- cowsay 'huh?'\n</code></pre> <p>All the section types do is to generate the actual command that is going to be executed, based on the users input. You can see all currently supported section types here.</p>"},{"location":"tutorial/#section-type-declaration","title":"Section Type Declaration","text":"<p>Consult here how section types are defined</p>"},{"location":"tutorial/#the-via-key","title":"The <code>via</code> key","text":"<p>Every section type supports the <code>via</code> key, which can be used to chain commands.</p> <pre><code>[ssh]\ncmd=ssh root@server {}\n\n[nix]\nnix=uv\nvia=ssh\n\n[uv]\ncmd=uv {}\nvia=nix\n\n[myscript]\ncmd=run myscript.py {}\nvia=uv\n</code></pre> <p>Calling <code>panini myscript</code> would run:</p> <pre><code>ssh root@server nix-shell --packages uv --run 'uv run myscript.py'\n</code></pre>"},{"location":"tutorial/#the-env-key","title":"The <code>env</code> key","text":"<p>The <code>env</code> key is easy to explain. </p> <pre><code>[envtest]\ncmd=printenv FOO\nenv=\n  FOO=123\n</code></pre> <p>leads to:</p> <pre><code>$ panini envtest\n123\n$ panini getcmd envtest\nenv FOO=123 printenv FOO\n</code></pre>"},{"location":"tutorial/#conclusion","title":"Conclusion","text":"<ul> <li>Every INI section is a command</li> <li>Section types are really just templates to build the command</li> </ul>"}]}